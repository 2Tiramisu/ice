#!/usr/bin/env ruby

require 'xcodeproj'

tests = [
    "TestCommon",
#     "Ice/acm",
#     "Ice/adapterDeactivation",
#     "Ice/admin",
#     "Ice/ami",
#     "Ice/binding",
#     "Ice/defaultServant",
    "Ice/defaultValue",
#     "Ice/dispatcher",
    "Ice/enums",
#     "Ice/exceptions",
#     "Ice/facets",
#     "Ice/hold",
#     "Ice/info",
#     "Ice/inheritance",
#     "Ice/invoke",
#     "Ice/location",
#     "Ice/objects",
#     "Ice/operations",
#     "Ice/optional",
    "Ice/properties",
#     "Ice/proxy",
#     "Ice/retry",
#     "Ice/scope",
#     "Ice/servantLocator",
#     "Ice/slicing/exceptions",
#     "Ice/slicing/objects",
#     "Ice/stream",
#     "Ice/timeout",
#     "Ice/udp"
]

desc "Generate Xcode projects required to build Ice for Swift"
task :iceproj do
    project = Xcodeproj::Project.new("ice.xcodeproj")
    [:osx, :ios].each { |platform| create_iceproj(project, tests, platform) }
end

desc "Build Ice for Swift iOS framework, sdk: iphonesimulator|iphoneos config: Debug|Release"
task iossrcs: [:iceproj]
task :iossrcs, [:sdk, :config] do |t, args|
    sdk = args.sdk || "iphonesimulator"
    config = args.config || "Debug"
    system("xcodebuild -project ice.xcodeproj -scheme \"Ice iOS\" -sdk #{sdk} -config #{config}")
end

desc "Build Ice for Swift iOS framework and tests, sdk: iphonesimulator|iphoneos config: Debug|Release"
task iosbuild: [:iceproj]
task :iosbuild, [:sdk, :config] do |t, args|
    sdk = args.sdk || "iphonesimulator"
    config = args.config || "Debug"
    system("xcodebuild -project ice.xcodeproj -scheme \"TestDriver iOS\" -sdk #{sdk} -config #{config}")
end

desc "Build Ice for Swift macOS framework, config: Debug|Release"
task macossrcs: [:iceproj]
task :macossrcs, [:config] do |t, args|
    config = args.config || "Debug"
    system("xcodebuild -project ice.xcodeproj -scheme \"Ice macOS\" -config #{config}")
end

desc "Build Ice for Swift macOS framework and tests, config: Debug|Release"
task macosbuild: [:iceproj]
task :macosbuild, [:config] do |t, args|
    config = args.config || "Debug"
    system("xcodebuild -project ice.xcodeproj -scheme \"TestDriver macOS\" -config #{config}")
end

task :default => [:macosbuild]

def create_iceproj(project, tests, platform)

    platform_name = platform == :osx ? "macOS" : "iOS"
    carthage_prefix = platform == :osx ? "Mac" : "iOS"
    frameworks_group = platform == :osx ? "OS X" : "iOS"

    ice_target = project.new_target(:framework, "Ice", platform)
    ice_target.name = "Ice #{platform_name}"

    target = ice_target
    target.frameworks_build_phases.clear()

    group = project_group(project, "src/IceObjc")
    target_add_matching_files(target, group, "src/IceObjc", ["*.mm"])
    target_add_headers(target, group, "src/IceObjc", ["*.h"], attributes: ["Private"])

    target_set_common_build_settings(target, "src/Ice/Info.plist", "Ice")
    cpp_libraries = ["Ice", "IceSSL", "IceDiscovery", "IceLocatorDiscovery"]

    if platform == :osx then
        target.build_configurations.each { |config|
            config.build_settings["HEADER_SEARCH_PATHS"] = [
                "$(SRCROOT)/../cpp/include/",
                "$(SRCROOT)/../cpp/include/generated"
            ]
            config.build_settings["LIBRARY_SEARCH_PATHS"] = "$(SRCROOT)/../cpp/lib"
            config.build_settings["SWIFT_INCLUDE_PATHS"] = "$(SRCROOT)/src/IceObjc"
            config.build_settings["DEFINES_MODULE"] = "YES"
        }
        copy_phase = target.new_copy_files_build_phase("Copy Frameworks")
        copy_phase.dst_subfolder_spec = Xcodeproj::Constants::COPY_FILES_BUILD_PHASE_DESTINATIONS[:frameworks]
        libraries = cpp_libraries.map{ |item| "lib#{item}++11.37.dylib"}
        target.frameworks_build_phases.clear()
        group_add_matching_files(project.frameworks_group, "../cpp/lib", libraries).each do |ref|
            target.frameworks_build_phases.add_file_reference(ref, true)
            file = copy_phase.add_file_reference(ref)
            file.settings = { 'ATTRIBUTES' => ['CodeSignOnCopy'] }
        end
    else
        target.build_configurations.each { |config|
            config.build_settings["HEADER_SEARCH_PATHS"] = [
                "$(SRCROOT)/../sdk/$(PLATFORM_NAME).sdk/usr/include"
            ]
            config.build_settings["LIBRARY_SEARCH_PATHS"] = "$(SRCROOT)/../sdk/$(PLATFORM_NAME).sdk/usr/lib"
            config.build_settings["OTHER_LDFLAGS"] = [
                "-lIce++11",
                "-lIceSSL++11",
                "-lIceDiscovery++11",
                "-lIceLocatorDiscovery++11",
                "-lIceIAP++11",
                "-lbz2",
                "-liconv"
            ]
            config.build_settings["GCC_PREPROCESSOR_DEFINITIONS"] = [
                "ICE_STATIC_LIBS"
            ]
        }

        target.add_system_framework("Security")
        target.add_system_framework("CFNetwork")
        target.add_system_framework("Foundation")
        target.add_system_framework("UIKit")
    end

    group = project_group(project, "src/Ice")
    group_add_matching_files(group, "src/Ice", ["*.plist"])
    target_add_headers(target, group, "src/Ice", ["*.h"])
    target_add_matching_files(target, group, "src/Ice", ["*.swift"])
    excludes = {
        "Ice" => ["Metrics.ice"]
    }

    slices = ["Ice", "IceSSL"]
    if platform == :ios then
        slices << "IceIAP"
    end

    slices.each do |item|
        group = project_group(project, "src/Ice/slice/#{item}")
        target_add_matching_files(target, group, "../slice/#{item}", ["*.ice"], excludes[item] || [])
        add_slice_compiler(project, target, item)
    end

    add_lint_build_phase(target, "src/Ice")

    #
    # Test projects
    #
    tests.each do |test|
        target = project.new_target(:framework, target_name(test), platform)
        target.name = "#{target.name} #{platform_name}"
        unless test == "TestCommon" then
            common = project.targets.find { |t| t.name == "TestCommon #{platform_name}" }
            target.frameworks_build_phases.add_file_reference(common.product_reference)
        end
        target.frameworks_build_phases.add_file_reference(ice_target.product_reference, true)

        add_slice_compiler(project, target)
        add_lint_build_phase(target, "test/#{test}")

        #
        # Add .ice and .swift files to the target
        #
        group = project_group(project, "test/#{test}")
        group_add_matching_files(group, "test/#{test}", ["*.plist"])
        target_add_matching_files(target, group, "test/#{test}", ["*.ice", "*.swift"])

        target_set_common_build_settings(target, "test/#{test}/Info.plist", target_name(test))
    end

    target = project.new_target(:application, "TestDriver", platform)
    target.name = "#{target.name} #{platform_name}"
    target_set_common_build_settings(target, "test/TestDriver/#{platform_name}/Info.plist", "TestDriver")
    add_slice_compiler(project, target)
    add_lint_build_phase(target, "test/TestDriver")

    group = project_group(project, "test/TestDriver")
    target_add_matching_files(target, group, "test/TestDriver", ["*.ice", "*.swift"])
    target_add_matching_files(target, group, "test/TestDriver/#{platform_name}", ["*.ice", "*.swift"])

    if platform == :ios then
        target_add_matching_files(target, group, "../scripts", ["*.ice"])
        target_add_matching_files(target, group, "test/TestDriver/#{platform_name}", ["*.xcassets"])
        target_add_matching_files(target, group, "test/TestDriver/#{platform_name}/Base.lproj", ["*.storyboard"])
    end

    #
    # Copy Ice and Test frameworks to the test driver
    #
    copy_phase = target.new_copy_files_build_phase("Copy Frameworks")
    copy_phase.dst_subfolder_spec = Xcodeproj::Constants::COPY_FILES_BUILD_PHASE_DESTINATIONS[:frameworks]
    file = copy_phase.add_file_reference(ice_target.product_reference)
    file.settings = { 'ATTRIBUTES' => ['CodeSignOnCopy'] }
    tests.each do |test|
        name = target_name(test)
        framework = project.targets.find { |t| t.name == "#{name} #{platform_name}" }
        target.frameworks_build_phases.add_file_reference(framework.product_reference)
        file = copy_phase.add_file_reference(framework.product_reference)
        file.settings = { 'ATTRIBUTES' => ['CodeSignOnCopy'] }
    end

    project.targets.each do |target|
        group = project.frameworks_group[frameworks_group]
        group_add_matching_files(group, "Carthage/Build/#{carthage_prefix}", ["PromiseKit.framework"]).each do |ref|
            target.frameworks_build_phases.add_file_reference(ref, true)
            if target.name == "TestDriver #{platform_name}" then
                copy_phase.add_file_reference(ref)
            end
        end
    end

    #
    # Sort the project and save it
    #
    project.sort({:groups_position => :above})
    project.save()

    #
    # Ensure Ice.framework has a shared scheme to build it, this is required for Carthage builds
    #
    scheme = Xcodeproj::XCScheme.new
    scheme.add_build_target(ice_target)
    scheme.save_as("ice.xcodeproj", "Ice #{platform_name}", true)
end

def project_group(project, name)
    group = project.main_group
    name.split("/").each { |item|
        new_group = group[item]
        unless new_group
            new_group = group.new_group(item)
        end
        group = new_group
    }
    group
end

def target_name(basename, suffix = nil)
    name = basename.split("/").map{ |item| item[0].upcase + item[1..-1]}.join()
    suffix ? "#{name} #{suffix}" : name
end

def add_slice_compiler(project, target, prefix = nil)
    #
    # Add Slice Compiler build rule to the target
    #
    rule = project.new(Xcodeproj::Project::PBXBuildRule)
    rule.compiler_spec = "com.apple.compilers.proxy.script"
    rule.file_type = "pattern.proxy"
    if prefix then
        rule.name = "Slice Compiler for #{prefix}/*.ice"
        rule.file_patterns = "*/#{prefix}/*.ice"
        rule.script = "$SRCROOT/config/xcode-slice2swift.sh #{prefix}"
        rule.output_files = ["$(DERIVED_FILE_DIR)/#{prefix}_$(INPUT_FILE_BASE).swift"]
    else
        rule.name = "Slice Compiler"
        rule.file_patterns = "*.ice"
        rule.script = "$SRCROOT/config/xcode-slice2swift.sh"
        rule.output_files = ["$(DERIVED_FILE_DIR)/$(INPUT_FILE_BASE).swift"]
    end
    target.build_rules << rule
end

def add_lint_build_phase(target, basedir)
    phase = target.new_shell_script_build_phase("Swiftformat & Swiftlint")
    phase.shell_script = "$SRCROOT/config/xcode-swiftlint.sh $SRCROOT/#{basedir} $SRCROOT/.swiftlint.yml"
end

def group_add_matching_files(group, basedir, patterns, exclude = [])
    files = []
    Dir.chdir(basedir) do
        patterns.each do |p|
          Dir.glob(p) do |file|
                files << file
            end
        end
    end
    files = files.reject { |item| exclude.any? { |pattern| item.match(pattern) } }
    references = []
    files.map { |file|  group.find_subpath(file) ||  group.new_file("#{basedir}/#{file}") }
end

def target_add_matching_files(target, group, basedir, patterns, excludes = [])
    target.add_file_references(group_add_matching_files(group, basedir, patterns, excludes))
end

def target_add_headers(target, group, basedir, patterns, excludes: [], attributes: ["Public"])
    files = group_add_matching_files(group, basedir, patterns, excludes)
    files.each do |file|
        header = target.headers_build_phase.add_file_reference(file)
        header.settings = { "ATTRIBUTES" => attributes }
    end
end

def target_set_common_build_settings(target, plist, bundle)
    target.build_configurations.each { |config|
        config.build_settings["CODE_SIGN_STYLE"] = "Automatic"
        config.build_settings["CODE_SIGN_IDENTITY"] = ""
        config.build_settings["DEVELOPMENT_TEAM"] = "U4TBVKNQ7F"
        config.build_settings["INFOPLIST_FILE"] = plist
        config.build_settings["PRODUCT_NAME"] = bundle
        config.build_settings["PRODUCT_BUNDLE_IDENTIFIER"] = "com.zeroc.#{bundle}"
    }
end
